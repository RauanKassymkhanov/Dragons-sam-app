AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Dragons-sam-app

  SAM Template for creating dragons 

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Runtime: python3.11
    Layers:
      - !Ref DragonsAppDependencyLayer

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

Resources:
  DragonsAppDependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: "DependencyLayer"
      Description: "Layer shared dependencies"
      ContentUri: .
      CompatibleRuntimes:
        - python3.11
    Metadata:
      BuildMethod: makefile

  CreateDragonFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "CreateDragonFunction-${Environment}"
      CodeUri: create_dragon/
      Handler: create_dragon.lambda_handler
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !GetAtt DragonsTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DragonsTable
          AWS_REGION_NAME: !Ref AWS::Region
          ENV: !Ref Environment
      Events:
        CreateDragonApi:
          Type: Api
          Properties:
            Path: /dragons
            Method: post

  StreamHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "StreamHandlerFunction-${Environment}"
      CodeUri: stream_handler/
      Handler: stream_handler.lambda_handler
      Events:
        DDBEvent:
          Type: DynamoDB
          Properties:
            Stream:
              !GetAtt DragonsTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
            Enabled: true
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref DragonEventsQueue
          AWS_REGION_NAME: !Ref AWS::Region
      Policies:
        - DynamoDBStreamReadPolicy:
            TableName: !Ref DragonsTable
            StreamName: !GetAtt DragonsTable.StreamArn
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DragonEventsQueue.QueueName

  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: send-message-to-sqs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt DailyReportQueue.Arn

  DailyReportScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: DailyReportScheduler
      ScheduleExpression: cron(0 0 * * ? *)
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !GetAtt DailyReportQueue.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: '{"task": "daily_report_trigger"}'

  DragonEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "dragon-events-queue-${Environment}.fifo"
      FifoQueue: true
      ContentBasedDeduplication: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DragonEventsDLQ.Arn
        maxReceiveCount: 5

  DragonEventsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "dragon-events-dlq-${Environment}.fifo"
      FifoQueue: true
      ContentBasedDeduplication: true

  DailyReportQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "daily-report-queue-${Environment}"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DailyReportDLQ.Arn
        maxReceiveCount: 5

  DailyReportDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "daily-report-dlq-${Environment}"

  DragonsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "dragons-${Environment}"
      AttributeDefinitions:
        - AttributeName: dragon_id
          AttributeType: S
      KeySchema:
        - AttributeName: dragon_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

Outputs:
  CreateDragonFunction:
    Description: "Lambda Function ARN for creating dragons"
    Value: !GetAtt CreateDragonFunction.Arn
  DragonsTableName:
    Description: "DynamoDB Table for storing dragons"
    Value: !Ref DragonsTable
  MyLayerVersion:
    Description: "Lambda Layer for shared dependencies"
    Value: !Ref DragonsAppDependencyLayer
